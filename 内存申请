1.分配内存空间函数 malloc
  函数功能： 在内存的动态存储器（堆区）中分配一块长度为size字节的连续内存空间，用来存放类型说明符指定的数据类型
  函数原型： void *malloc(unsigned int num_bytes);
				形参num_bytes是需要申请内存空间的字节数
  调用形式： (类型说明符*) malloc(size)
  返回值：
		分配成功：分配的内存空间的起始地址
		分配失败：NULL
  注意事项：
		1. 对malloc的返回值一定要强制类型转换；
		2. malloc申请的内存空间的内容不确定，一般需要使用memset进行清空；
		3. 调用malloc后，一定要判断一下，是否申请内存成功；
		4. 如果多次malloc申请的内存，第一次和第二次申请的内存不一定连续；
          
2.free函数 （释放内存函数）
  函数说明：free函数释放ptr指向的内存
  函数定义：void free(void *ptr)
  注意事项：ptr指向的内存必须是malloc，calloc，relloc动态申请的内存

3.memset函数的作用是将动态分配的内存空间初始化为0。具体来说，memset函数用于将一块内存空间中的每个字节都设置为指定的值。
  memset(p, 0, n*(int)sizeof(int))将指针p所指向的内存空间中的每个字节都设置为0。参数p是指向要初始化的内存空间的指针，0是要设置的值，n*(int)sizeof(int)表示要设置的字节数。
  通过将内存空间初始化为0，可以确保在使用这块内存空间之前，所有的字节都被清零，避免了可能出现的垃圾数据对程序的影响。这在一些情况下特别重要，比如在使用动态分配的内存空间之前，需要将其清空或者初始化为特定的值。 

4.calloc函数
  函数原型：calloc(size_t nmemb, size_t size);
			参数： size_t是无符号整形，是在头文件中用typeof定义出来的
			返回值：申请失败：返回NULL；申请成功：返回申请的内存的首地址
  函数功能：在内存的堆区，申请nmemb块，每块大小为size字节的连续内存空间
  注意事项：
			1. calloc函数申请的内存空间已经自动被清0了，不用再用memset清0；
			2. calloc函数申请的xxxxwwads内存空间字节数为nmemb和size的乘积；

5.函数原型：realloc(s, unsigned int newsize);
  形参：s原先开辟内存的地址           newsize：新申请内存的大小
  返回值：新申请内存的首地址
  函数功能：在原先s执行的内存基础上重新申请内存，新的内存大小为newsize字节，如果原先内存后面有足够大的空间就追加；如果没有则realloc函数会在内存堆区找一个newsize字节大小的空间来申请，将原先内存中的数据拷贝过来，然后释放原先的内存，最后返回新内存的地址

6.realloc函数（重新申请内存空间）
形参：s原先开辟内存的地址           newsize：新申请内存的大小
返回值：新申请内存的首地址
函数功能：在原先s执行的内存基础上重新申请内存，新的内存大小为newsize字节，如果原先内存后面有足够大的空间就追加；如果没有则real
